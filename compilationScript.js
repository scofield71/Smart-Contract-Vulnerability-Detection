const fs = require('fs');
const path = require('path');
const solc = require('solc');

function readFilesSync(dir) {
    const files = [];

    fs.readdirSync(dir).forEach(filename => {
        const name = path.parse(filename).name;
        const ext = path.parse(filename).ext;
        const filepath = path.resolve(dir, filename);
        const stat = fs.statSync(filepath);
        const isFile = stat.isFile();

        if (isFile) files.push({ filepath, name, ext, stat });
    });
    console.log("All files extracted");
    return files;
}

function writeFilesync(fileName,fileContent){
    //console.log(fileName,fileContent)
    fs.writeFile(fileName, fileContent, (err) => {
        if (err) {
          console.error('Error writing to the file:', err);
        } else {
          console.log('File created and written successfully.');
        }
      });
}

const files = readFilesSync('./Dataset/ether strict equality (SE)/Output/0.4.24');
let k = 1;
for(let i=0;i<files.length;i++) {
    try{
        //console.log("Hi");
        let file=files[i];
        const sourceCode = fs.readFileSync(file.filepath, 'utf8');
        // console.log("Hi");
        const compiledCode = solc.compile(sourceCode, 1);
        //console.log("Hi");
        let bytecode = "";
        Object.keys(compiledCode.contracts).forEach(key => {
            bytecode+=compiledCode.contracts[key].opcodes;
            bytecode+=" ";
        })
        console.log(`Compiled ${k}th file`);
        k++;
        writeFilesync(`./Dataset/ether strict equality (SE)/Opcodes/${file.name}.txt`,bytecode);
    }
    catch(err){
        console.log("This file can't be compiled",err);
    }
}

// Read the Solidity source code from your file
//const sourceCode = fs.readFileSync('contracts_divided/__0.4.18/ 11225.sol', 'utf8');

// Compile the source code with the specified compiler version
//const compiledCode = solc.compile(sourceCode, 1);

//console.log(compiledCode)
// Retrieve the compiled contract bytecode and ABI
//const bytecode = compiledCode.contracts[':StandardToken'].opcodes;
// let bytecode = "";
// Object.keys(compiledCode.contracts).forEach(key => {
//     bytecode+=compiledCode.contracts[key].opcodes;
//     bytecode+=" ";
// })
//console.log(typeof compiledCode.contracts)
//const abi = compiledCode.contracts[':CMAcoin'].interface;

//console.log('Bytecode:', bytecode);
//console.log('ABI:', abi);
