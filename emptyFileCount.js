const fs = require('fs');
const path = require('path');

let count = 0;
// Function to check if a file is empty
function isFileEmpty(filePath) {
  try {
    // Read the contents of the file synchronously
    const fileContent = fs.readFileSync(filePath, 'utf-8');

    // Check if the file content is empty
    return fileContent.trim() === '';
  } catch (error) {
    // Handle errors, such as file not found
    console.error(`Error reading file ${filePath}:`, error.message);
    return false;
  }
}

// Function to read all text files in a directory
function checkFilesInDirectory(directoryPath) {
  try {
    // Read the list of files in the directory
    const files = fs.readdirSync(directoryPath);

    // Check each file for emptiness
    files.forEach((file) => {
      const filePath = path.join(directoryPath, file);
      const isEmpty = isFileEmpty(filePath);

      if (isEmpty) {
        fs.unlinkSync(filePath);
        count=count+1;
      }
      // else {
      //   const newFileName = file.trim()
      //   const newFilePath = path.join(directoryPath,newFileName);

      //   fs.rename(filePath, newFilePath, (err) => {
      //     if (err) {
      //       console.error(`Error renaming file ${file}: ${err}`);
      //     } else {
      //       console.log(`File ${file} renamed to ${newFileName} successfully`);
      //     }
      //   });
      // }
    });
  } catch (error) {
    // Handle errors, such as directory not found
    console.error(`Error reading directory ${directoryPath}:`, error.message);
  }
}

// Replace 'yourDirectoryPath' with the actual path of your directory
const directoryPath = './Dataset/ether strict equality (SE)/Opcodes/';

// Check files in the specified directory
checkFilesInDirectory(directoryPath);

console.log(count);
