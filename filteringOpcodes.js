const fs = require('fs');
const path = require('path');

// const ARITHMETIC_OP = new Set(["ADD","MUL","SUB","DIV","SDIV","SMOD","MOD","ADDMOD",
// "MULMOD","EXP"])

// const CONSTANT1 = new Set(["BLOCKHASH","TIMESTAMP","NUMBER","DIFFICULTY","GASLIMIT",
// "COINBASE"])

// const CONSTANT2 = new Set(["ADDRESS","ORIGIN","CALLER"])

// const COMPARISON = new Set(["LT","GT","SLT","SGT"])

// const LOGIC_OP = new Set(["AND","OR","XOR","NOT"])

// const DUP = new Set(["DUP1","DUP2","DUP3","DUP4","DUP5","DUP6","DUP7","DUP8","DUP9",
// "DUP10","DUP11","DUP12","DUP13","DUP14","DUP15","DUP16"])

// const SWAP = new Set(["SWAP1","SWAP2","SWAP3","SWAP4","SWAP5","SWAP6","SWAP7","SWAP8",
// "SWAP9","SWAP10","SWAP11","SWAP12","SWAP13","SWAP14","SWAP15","SWAP16"])

// const PUSH = new Set(["PUSH5","PUSH6","PUSH7","PUSH8","PUSH9","PUSH10","PUSH11","PUSH12",
// "PUSH13","PUSH14","PUSH15","PUSH16","PUSH17","PUSH18","PUSH19","PUSH20","PUSH21",
// "PUSH22","PUSH23","PUSH24","PUSH25","PUSH26","PUSH27","PUSH28","PUSH29","PUSH30",
// "PUSH31","PUSH32","PUSH1","PUSH2","PUSH3","PUSH4"])

// const LOG = new Set(["LOG0","LOG1","LOG2","LOG3","LOG4"])

const ethereumSpecificOpcodes = new Set(["ADD","SUB","SHA3","ADDRESS","BALANCE","ORIGIN","CALLER","CALLVALUE",
"CALLDATALOAD","CALLDATASIZE","CALLDATACOPY","CODESIZE","CODECOPY","GASPRICE","EXTCODESIZE","EXTCODECOPY",
"BLOCKHASH","COINBASE","TIMESTAMP","NUMBER","DIFFICULTY","GASLIMIT","GAS","CREATE","CALL","CALLCODE",
"RETURN","DELEGATECALL","SELFDESTRUCT","REVERT"])

function readFilesSync(dir) {
    const files = [];

    fs.readdirSync(dir).forEach(filename => {
        const name = path.parse(filename).name;
        const ext = path.parse(filename).ext;
        const filepath = path.resolve(dir, filename);
        const stat = fs.statSync(filepath);
        const isFile = stat.isFile();

        if (isFile) files.push({ filepath, name, ext, stat });
    });
    console.log("All files extracted");
    return files;
}

function writeFilesync(fileName,fileContent){
    //console.log(fileName,fileContent)
    fs.writeFile(fileName, fileContent, (err) => {
        if (err) {
          console.error('Error writing to the file:', err);
        } else {
          console.log('File created and written successfully.');
        }
      });
}

// Function to remove lines with hexadecimal addresses starting with "0x"
function removeHexAddresses(fileContent) {
  // Regular expression to match lines with hexadecimal addresses starting with "0x"
  const hexAddressRegex = /0x[0-9a-fA-F]+/;

  // Split the file content into lines by spaces
  const lines = fileContent.split(/\s+/);
  //console.log(lines)

  // Remove lines with hexadecimal addresses starting with "0x"
  const filteredContent = lines
    .filter(word => !hexAddressRegex.test(word))
    .join(' ');

  return filteredContent;
}

function replaceOpcodes(fileContent) {
    const lines = fileContent.split(/\s+/);

    let result = fileContent;

    result = lines
    .filter(word => ethereumSpecificOpcodes.has(word))
    .join(' ');

    // for(const searchString of ARITHMETIC_OP) {
    //     const regex = new RegExp(`\\b${searchString}\\b`, 'g');
    //     result = result.replace(regex,"ARITHMETIC_OP");
    // }

    // for(const searchString of CONSTANT1) {
    //     const regex = new RegExp(`\\b${searchString}\\b`, 'g');
    //     result = result.replace(regex,"CONSTANT1");
    // }

    // for(const searchString of CONSTANT2) {
    //     const regex = new RegExp(`\\b${searchString}\\b`, 'g');
    //     result = result.replace(regex,"CONSTANT2");
    // }

    // for(const searchString of COMPARISON) {
    //     const regex = new RegExp(`\\b${searchString}\\b`, 'g');
    //     result = result.replace(regex,"COMPARISON");
    // }
    
    // for(const searchString of LOGIC_OP) {
    //     const regex = new RegExp(`\\b${searchString}\\b`, 'g');
    //     result = result.replace(regex,"LOGIC_OP");
    // }

    // for(const searchString of DUP) {
    //     const regex = new RegExp(`\\b${searchString}\\b`, 'g');
    //     result = result.replace(regex,"DUP");
    // }

    // for(const searchString of SWAP) {
    //     const regex = new RegExp(`\\b${searchString}\\b`, 'g');
    //     result = result.replace(regex,"SWAP");
    // }

    // for(const searchString of PUSH) {
    //     const regex = new RegExp(`\\b${searchString}\\b`, 'g');
    //     result = result.replace(regex,"PUSH");
    // }

    // for(const searchString of LOG) {
    //     const regex = new RegExp(`\\b${searchString}\\b`, 'g');
    //     result = result.replace(regex,"LOG");
    // }

    return result;
}

//console.log("Step performed")
const files = readFilesSync('Classified_Opcodes/Unchecked_External_Call/')


for(let i=0;i<files.length;i++)
{
    try{

        let file = files[i]

        const data = fs.readFileSync(file.filepath, 'utf8');

        const filteredContent = removeHexAddresses(data);

        const replacedOpcodeContent = replaceOpcodes(filteredContent)

        writeFilesync(`Classified_Opcodes_Filtered/Unchecked_External_Call/${file.name}.txt`,replacedOpcodeContent);

        console.log(`File ${i} successfully filtered`);

    }catch(err){
        console.log("This file has some issue ",err)
    }
}















//Read the content of the file
// fs.readFile('test.txt', 'utf8', (err, data) => {
//   if (err) {
//     console.error('Error reading the file:', err);
//     return;
//   }

//   // Remove lines with hexadecimal addresses starting with "0x"
//   const filteredContent = removeHexAddresses(data);

//   const replacedOpcodeContent = replaceOpcodes(filteredContent)

//   // Write the filtered content back to the same file
//   fs.writeFile('test.txt', replacedOpcodeContent, 'utf8', err => {
//     if (err) {
//       console.error('Error writing to the file:', err);
//       return;
//     }

//     console.log('Filtered content has been written to the file.');
//   });
// });
