const fs = require('fs');
const axios = require('axios');

function filterAndTrimLinesFromFile(filename, filterCharacter) {
    // Read the file synchronously
    const data = fs.readFileSync(filename, 'utf8');
    
    // Split the data into an array of lines
    const lines = data.split('\n');
    
    // Initialize an array to store filtered and trimmed lines
    const filteredAndTrimmedLines = [];
    
    // Loop through each line
    lines.forEach((line) => {
        // Check if the line contains the filter character
        const index = line.indexOf(filterCharacter);
        if (index !== -1) {
            // If it does, trim the line after the filter character
            const trimmedLine = line.substring(0, index);
            // Push the trimmed line to the filteredAndTrimmedLines array
            filteredAndTrimmedLines.push(trimmedLine);
        }
    });
    
    return filteredAndTrimmedLines;
}

// Example usage:
const filename = 'scrawld_majority_unique.txt'; // Replace with your file name
const filterCharacter = '_'; // Replace with your filter character
const filteredAndTrimmedLines = filterAndTrimLinesFromFile(filename, filterCharacter);
// console.log(filteredAndTrimmedLines);
console.log('All files have been filtered out');


const apiUrls = filteredAndTrimmedLines.map(address => "https://api.etherscan.io/api?module=contract&action=getsourcecode&address=" + address + "&apikey=48G1PUK91P7PE452XJUJIC3UN9Q533YAES");

//console.log(apiUrls);
console.log("Generated API Urls");

async function makeMultipleAsyncApiCalls(urls,filteredAndTrimmedLines) {
    let responseDataArrayMap = new Map();
    try {
        for (let i=5000;i<urls.length;i++) {
            // Generate the API URL by concatenating with the base address
            const apiUrl = urls[i];
            const response = await axios.get(apiUrl);
            // console.log(response.data.result[0].SourceCode);
            //responseDataArray.push(response.data.result[0].SourceCode);
            responseDataArrayMap.set(filteredAndTrimmedLines[i],response.data.result[0].SourceCode);
            console.log(i + "th url is processed");
        }
        return responseDataArrayMap;
    } catch (error) {
        console.error('Error making API calls:', error.message);
        return null;
    }
}

// async function writeToFiles(responseDataArray) {
//     try {
//         for (let i = 0; i < responseDataArray.length; i++) {
//             const filename = `sujeetDataset/${filteredAndTrimmedLines[i]}.sol`;
//             //console.log(responseDataArray[i]);
//             const fileContent = responseDataArray[i].toString();
//             //console.log(typeof(fileContent));
//             await fs.writeFile(filename, fileContent);
//             console.log(`Response data ${i + 1} has been written to ${filename}`);
//         }
//     } catch (error) {
//         console.error('Error writing to file:', error.message);
//         console.error('Error data:', error);
//         throw error;
//     }
// }

async function writeToFiles(responseDataArrayMap) {
    try {
        // for (let i = 0; i < responseDataArray.length; i++) {
        //     const filename = `sujeetDataset/${filteredAndTrimmedLines[i]}.sol`;
        //     const fileContent = responseDataArray[i]; // Assuming responseDataArray[i] is already a string
        //     await new Promise((resolve, reject) => {
        //         fs.writeFile(filename, fileContent, (error) => {
        //             if (error) {
        //                 reject(error);
        //             } else {
        //                 console.log(`Response data ${i + 1} has been written to ${filename}`);
        //                 resolve();
        //             }
        //         });
        //     });
        // }
        responseDataArrayMap.forEach(async (value,key) => {
            const filename = `sujeetDataset/${key}.sol`;
            const fileContent = `${value}`;
            await new Promise((resolve, reject) => {
                fs.writeFile(filename, fileContent, (error) => {
                    if (error) {
                        reject(error);
                    } else {
                        console.log(`Response data has been written to ${filename}`);
                        resolve();
                    }
                });
            });
        })
    } catch (error) {
        console.error('Error writing to file:', error.message);
        console.error('Error data:', error);
        throw error; // Re-throw the error to be caught by the caller
    }
}

// const trimmedApiUrls = apiUrls.slice(0, 3);
makeMultipleAsyncApiCalls(apiUrls,filteredAndTrimmedLines)
.then(responseDataArrayMap => {
    writeToFiles(responseDataArrayMap).catch(error => {
        console.error('Error:', error.message);
    }); // Call the function to write response data to files
})
.catch(error => {
    console.error('Error:', error.message);
});